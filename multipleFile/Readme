# Streamlit PDF Chat App

This is a Streamlit app that allows users to upload PDF documents, process them, and have a conversational chat based on the content of the documents using a conversational retrieval chain.

# How It Works

The application follows these steps to provide responses to your questions:

workflow image path:'C:\Users\SaiKiran.b\Python G-Ai\multipleFile\assests\GAISteps.png'

*PDF Loading*: The app reads multiple PDF documents and extracts their text content.

*Text Chunking*: The extracted text is divided into smaller chunks that can be processed effectively.

*Language Model*: The application utilizes a language model to generate vector representations (embeddings) of the text chunks.

*Similarity Matching*: When you ask a question, the app compares it with the text chunks and identifies the most semantically similar ones.

*Response Generation*: The selected chunks are passed to the language model, which generates a response based on the relevant content of the PDFs.

**Getting Started**

Prerequisites
Python (>=3.6)
Streamlit (>=0.84.0)
PyPDF2 (>=1.26.0)
langchain Library (>=1.0.0)
htmlTemplates Module (Custom)

## Usage
> To run the app, navigate to the project directory in your terminal and execute:
**streamlit run app.py**

*The main application script that uses Streamlit to create a user interface for uploading PDF files, asking questions, and displaying chat responses.*

**Dependencies**
streamlit
PyPDF2
langchain Library
htmlTemplates Module
css
Custom CSS styles for styling the Streamlit app interface.

## Pypdf2 
    PyPDF2 is a Python module for processing PDF (Portable Document Format) files. 
    It includes capabilities for working with PDF documents such as reading, writing, merging, dividing, 
    and extracting content. PyPDF2 makes it easier to interact with PDF files using Python code.

## Streamlit
    Streamlit is a Python open-source library that makes it easier to create interactive web apps for data science and machine learning projects.

## langchain: 
    It is a framework , It allows us to use the  already powerful LLMs with memory and context , LLMs mean Large Language model are foundational machine learning
    that use deep learning algorithms to process and understand Natural language. It provides various components for working with natural language processing tasks.

*text_splitter*: Likely used to split text into smaller chunks for processing.
*embeddings*: Provides methods to generate embeddings (vector representations) of text. - (OpenAIEmbeddings)
*vectorstores*: This seems to deal with storing and retrieving vectorized text data. - for the vectorStores we are using (FAISS)
*chat_models*: Likely used to create and manage chatbot models. - (CHATOPENAI)
*memory*: Deals with managing conversation history or memory in a chatbot context. - (CoversationalBufferMemory)
*chains*: Possibly used for creating and managing chains of conversational components. - (ConversationalRetrievalChain)

## FAISS
    FAISS (Facebook AI Similarity Search) is a free and open-source library created by Facebook's AI Research team. 
    It is designed for using similarity search and grouping operations efficiently on big datasets of high-dimensional vectors.
    FAISS is very effective for closest neighbour search tasks, such as finding the most comparable vectors to a given query vector inside a dataset.